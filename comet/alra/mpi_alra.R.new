suppressMessages({
  library(pbdMPI)
  library(doParallel)
  library(Seurat)
  library(spam)
  library(spam64)
  library(irlba)
})


# TODO: address this seurat 5.0 warning message: "The `slot` argument of
# `GetAssayData()` is deprecated as of SeuratObject 5.0.0. Please use the
# `layer` argument instead."
# TODO: argparse for data path, num cpus, normalize
# TODO: break up and modularize sparse_alra, impute.geneset
# TODO: add comments / modify comments
# TODO: create package skeleton


check.rank.zero <- function(...) {
  if (rank == 0) {
      for (arg in list(...)) {
          eval(arg)
      }
  }
}


read.mtx <- function(path, normalize, data.type = "seurat") {
  start <- Sys.time()
  comm.print("Loading data...")

  if (data.type == "seurat") {
    obj <- readRDS(path)
    DefaultAssay(obj) <- "RNA"
    mtx <- GetAssayData(object=obj, slot="data")
    rm(obj)
  } else if (data.type == "10X") {
    mtx <- Read10X(path)
  }

  if (normalize) {
    mtx <- NormalizeData(mtx)
  }
  mtx <- t(as.spam.dgCMatrix(mtx))
  stopifnot(is(mtx, "spam"))

  num.cells <- dim(mtx)[1]
  num.genes <- dim(mtx)[2]
  msg <- paste0("Loaded matrix with", num.cells, " cells and ", num.genes,
                " genes.")
  comm.print(msg)
  comm.print(Sys.time() - start)
  return(mtx)
}


impute.geneset <- function(orig_colset, gene_colset, quantile.prob=0.001) {
  # loop over each gene column in gene_colset
  gene_colset_zero <- c()
  for (i in 1:dim(gene_colset)[2]) {
      orig_col <- orig_colset[,i]
      gene_col <- gene_colset[,i]
      
      gene_quants <- abs(quantile(gene_col, quantile.prob))
      gene_col_zero <- replace(gene_col, gene_col <= gene_quants, 0)
      
      sigma_1 <- sd(gene_col_zero[which(gene_col_zero != 0)])
      sigma_2 <- sd(orig_col[which(orig_col != 0)])
      mu_1 <- mean(gene_col_zero[which(gene_col_zero > 0)])
      mu_2 <- mean(orig_col[which(orig_col != 0)])

      sigma_1_2 <- sigma_2/sigma_1
      mu_1_2 <- -1*mu_1*sigma_2/sigma_1 + mu_2

      # determine whether or not imputation is needed for this gene
      # and assign to boolean do_imputation
      do_imputation <- !is.na(sigma_1) & !is.na(sigma_2) &
                       !(sigma_1 == 0 & sigma_2 == 0) & !(sigma_1 == 0)

      if (do_imputation) {
          # do imputation
          zeros <- which(gene_col_zero == 0)
          gene_col_zero <- gene_col_zero * sigma_1_2
          gene_col_zero <- gene_col_zero + mu_1_2
          gene_col_zero[zeros] = 0
      }
      negative <- gene_col_zero < 0
      gene_col_zero[negative] <- 0
      gene_col_zero[orig_col > 0 & gene_col_zero == 0] <- gene_col[orig_col > 0 & gene_col_zero == 0]
      gene_colset_zero <- c(gene_colset_zero, as.spam(gene_col_zero))
  }
  gene_colset_zero <- do.call("cbind.spam", gene_colset_zero)
  return(gene_colset_zero)
}


impute.geneset_foreach <- function(orig_colset, gene_colset, quantile.prob=0.001) {
  #num_cores <- detectCores(logical=FALSE) - 1
  #if (pbdMPI::comm.rank() == 1) { print(num_cores) }
  #cluster <- makeCluster(num_cores)
  cluster <- makeCluster(num.cpus.per.node)
  if (pbdMPI::comm.rank() == 1) { print(cluster) }
  registerDoParallel(cluster)
  # loop over each gene column in gene_colset
  #gene_colset_zero <- c()
  gene_colset_zero <- foreach(i=(1:dim(gene_colset)[2]), .packages=c("spam", "spam64"), .combine="cbind.spam") %dopar% {
  #for (i in 1:dim(gene_colset)[2]) {
      orig_col <- orig_colset[,i]
      gene_col <- gene_colset[,i]
      
      gene_quants <- abs(quantile(gene_col, quantile.prob))
      gene_col_zero <- replace(gene_col, gene_col <= gene_quants, 0)
      
      sigma_1 <- sd(gene_col_zero[which(gene_col_zero != 0)])
      sigma_2 <- sd(orig_col[which(orig_col != 0)])
      mu_1 <- mean(gene_col_zero[which(gene_col_zero > 0)])
      mu_2 <- mean(orig_col[which(orig_col != 0)])

      sigma_1_2 <- sigma_2/sigma_1
      mu_1_2 <- -1*mu_1*sigma_2/sigma_1 + mu_2

      # determine whether or not imputation is needed for this gene
      # and assign to boolean do_imputation
      do_imputation <- !is.na(sigma_1) & !is.na(sigma_2) &
                       !(sigma_1 == 0 & sigma_2 == 0) & !(sigma_1 == 0)

      if (do_imputation) {
          # do imputation
          zeros <- which(gene_col_zero == 0)
          gene_col_zero <- gene_col_zero * sigma_1_2
          gene_col_zero <- gene_col_zero + mu_1_2
          gene_col_zero[zeros] = 0
      }
      negative <- gene_col_zero < 0
      gene_col_zero[negative] <- 0
      gene_col_zero[orig_col > 0 & gene_col_zero == 0] <- gene_col[orig_col > 0 & gene_col_zero == 0]
      #gene_colset_zero <- c(gene_colset_zero, as.spam(gene_col_zero))

      return(gene_col_zero)
  }
  #gene_colset_zero <- do.call("cbind.spam", gene_colset_zero)
  return(gene_colset_zero)
  stopCluster(cluster)
}


mpi.split.colsets <- function(job_id, idx_sets, mtx, ud_mtx, v_mtx) {
  idx_set <- idx_sets[[job_id]]
  orig_colset <- mtx[,idx_set]
  gene_colset <- ud_mtx %*% v_mtx[,idx_set]
  #gene_colset <- impute.geneset(orig_colset, gene_colset)
  gene_colset <- impute.geneset_foreach(orig_colset, gene_colset)
  return(gene_colset)
}


check_mtx <- function(mtx) {
  # need the count mtx to be cells x genes
}


choose_k <- function(mtx, k, noise_start=80, max_sds=6) {
  # pick k heuristically
  check.rank.zero(print("Choosing k..."), start <- Sys.time())
  noise_svals <- noise_start:k
  rsvd_out <- irlba(mtx, nv=k)
  diffs <- rsvd_out$d[1:(length(rsvd_out$d)-1)] - rsvd_out$d[2:length(rsvd_out$d)]
  mu <- mean(diffs[noise_svals-1])
  sigma <- sd(diffs[noise_svals-1])
  num_of_sds <- (diffs-mu)/sigma
  k <- max(which(num_of_sds > max_sds))
  check.rank.zero(print(paste0("k=", k, " chosen")), print(Sys.time() - start))
  return(k)
}


sparse_alra <- function(mtx, k=NULL) {
  if (is.null(k)) {
      k <- check.rank.zero(choose_k(mtx, k))
      k <- pbdMPI::bcast(k, rank.source = 0)
  }
  if (pbdMPI::comm.rank() != 0) { return(NULL) }
  # randomized svd
  if (pbdMPI::comm.rank() == 0) {
      print("Starting rsvd...")
      start <- Sys.time()
      rsvd_out <- irlba(mtx, k)
      u <- as.spam(rsvd_out$u)
      d <- as.spam(rsvd_out$d)
      v <- as.spam(rsvd_out$v)
      rm(rsvd_out)
  } else {
      u <- NULL
      d <- NULL
      v <- NULL
  }
  u <- pbdMPI::bcast(u, rank.source = 0)
  d <- pbdMPI::bcast(d, rank.source = 0)
  v <- pbdMPI::bcast(v, rank.source = 0)
  # note: dim(u[,1:k] %*% diag(d[1:k]) %*% t(v[,1:k])) == dim(mtx)
  # note for linear algebra retards (us): matrix mult needs
  # num columns 1st matrix == num rows 2nd matrix
  # u 3197 x k
  # d k x k
  # v k x 57186
  
  # test code below
  #i <- 1
  #orig_col <- mtx[,i]
  #gene_col <- u[,1:k] %*% diag(d[1:k]) %*% as.matrix(t(v[, 1:k])[,i])
  #gene_col <- impute_gene(orig_col, gene_col)
  # test code above

  # original code to compare to
  #test_result <- u[,1:k] %*% diag(d[1:k]) %*% t(v[,1:k])

  # doparallel attempt

  # linear algrebra
  u_mtx <- u[,1:k]
  d_mtx <- as.spam(diag(d[1:k]))
  ud_mtx <- u_mtx %*% d_mtx
  v_mtx <- t(v[,1:k])

  if (pbdMPI::comm.rank() == 0) {
      print("Rsvd done")
      print(Sys.time() - start)
  }

  num_genes <- dim(mtx)[2]
  all_indices <- 1:num_genes
  chunk_size <- num_genes %/% (num.nodes - 1)
  idx_sets <- split(all_indices, ceiling(seq_along(all_indices)/chunk_size))

  if (pbdMPI::comm.rank() == 0) {
      print("Imputing...")
      start <- Sys.time()
  }
  job_ids <- seq(1, length(idx_sets))
  gene_colsets <- pbdMPI::task.pull(job_ids, mpi.split.colsets,
                                    idx_sets, mtx, ud_mtx, v_mtx)
  if (pbdMPI::comm.rank() == 0) {
      print("Imputation done")
      print(Sys.time() - start)
      print("Cbinding...")
      start <- Sys.time()
      imputed_mtx <- do.call("cbind.spam", gene_colsets)
      print("Cbinding done")
      print(Sys.time() - start)
      print(str(imputed_mtx))
      print(class(imputed_mtx))
      print(dim(imputed_mtx))
      # change this to save?
      return(imputed_mtx)
  }
}


# initialize
num.nodes <- Sys.getenv("SLURM_JOB_NUM_NODES")
num.mpi.tasks <- comm.size()
if (num.nodes != num.mpi.tasks) {
  stop("Number of nodes must equal number of mpi tasks: ",
       num.nodes, " nodes but ", num.mpi.tasks, " tasks.")
}
rank <- comm.rank()
num.cpus.per.node <- 2
path <- "/lustre/orion/syb111/proj-shared/Personal/jmerlet/projects/atopic_dermatitis/ko/data/count-matrices/SRR14253412_Solo.out/Gene/filtered"
path <- "/gpfs/alpine2/syb112/proj-shared/Projects/scrna-seq/data/arabidopsis/root/healthy/ohler/seurat/root_atlas_seu4.rds"

# impute
imputed.mtx <- sparse_alra(mtx)

# MPI cleanup
finalize()
